CREATE TABLE STATIONS
(
	ID SERIAL PRIMARY KEY,
	TABLE_NAME VARCHAR(20) UNIQUE,
	NAME VARCHAR(50) NOT NULL,
	OPERATOR VARCHAR(50) NOT NULL,
	SENSOR_TYPE VARCHAR(50) NOT NULL,
	X_COORDINATE DOUBLE PRECISION NOT NULL,
	Y_COORDINATE DOUBLE PRECISION NOT NULL,
	COORDINATE_SYSTEM VARCHAR(50) NOT NULL,
	ADDRESS VARCHAR(100),
	STATUS BOOL,
	START_TIME TIMESTAMP,
	START_DESCRIPTION VARCHAR(100),
	END_TIME TIMESTAMP,
	END_DESCRIPTION VARCHAR(100),
	VALIDATION_1 DOUBLE PRECISION,
	VALIDATION_2 DOUBLE PRECISION,
	VALIDATION_3 DOUBLE PRECISION,
	VALIDATION_4 DOUBLE PRECISION,
	VALIDATION_5 DOUBLE PRECISION,
	VALIDATION_6 DOUBLE PRECISION
);

CREATE OR REPLACE FUNCTION TG_CREATE_NEW_STATION_TABLE()
	RETURNS TRIGGER
	LANGUAGE PLPGSQL
	AS
	$$
		DECLARE
			STATION_NAME VARCHAR(20) := 'STATION';
		BEGIN
			STATION_NAME := CONCAT(STATION_NAME, TO_CHAR(NEW.ID, 'FM999999999999999999'));
		
			UPDATE STATIONS
				SET TABLE_NAME = STATION_NAME,
					START_TIME = NOW(),
					STATUS = TRUE
				WHERE ID = NEW.ID;
			
			EXECUTE FORMAT
			('
				CREATE TABLE %s
				(
					T DOUBLE PRECISION PRIMARY KEY,
					A_X DOUBLE PRECISION NOT NULL,
					A_Y DOUBLE PRECISION NOT NULL,
					A_Z DOUBLE PRECISION NOT NULL,
					Temp DOUBLE PRECISION NOT NULL,
					STATUS BOOL
				);
			 	
			 	CREATE INDEX INDEX_%s ON %s(T);
			 
			 	CREATE OR REPLACE FUNCTION TG_%s()
					RETURNS TRIGGER
					LANGUAGE PLPGSQL
					AS
					$Q$
						DECLARE
							STATUS_RESULT BOOL := TRUE;
			 				C1 DOUBLE PRECISION := 0;
			 				C2 DOUBLE PRECISION := 0;
			 				C3 DOUBLE PRECISION := 0;
			 				C4 DOUBLE PRECISION := 0;
			 			 	C5 DOUBLE PRECISION := 0;
			 			 	C6 DOUBLE PRECISION := 0;
						BEGIN
			 				SELECT validation_1,
			 					   validation_2,
			 					   validation_3,
			 					   validation_4,
			 					   validation_5,
			 					   validation_6
			 					FROM STATIONS
			 					WHERE TABLE_NAME = ''%s''
			 				INTO C1, C2, C3, C4, C5, C6;
							
			 				-- VALIDATION CONDITION ----------------------------
			 				-- IF <?> THEN
			 				--	STATUS_RESULT = FALSE;
			 				-- END IF;
			 				-- -------------------------------------------------
							UPDATE %s
								SET STATUS = STATUS_RESULT
								WHERE T = NEW.T;

						RETURN NULL;
						END;
					$Q$;

				CREATE TRIGGER %s
					AFTER INSERT
						ON %s
					FOR EACH ROW
						EXECUTE PROCEDURE TG_%s();
			', STATION_NAME, STATION_NAME, STATION_NAME,
			 STATION_NAME, STATION_NAME, STATION_NAME,
			 STATION_NAME, STATION_NAME, STATION_NAME);
			
		RETURN NULL;
		END;
	$$;
	
CREATE TRIGGER CREATE_NEW_STATION_TABLE
	AFTER INSERT
    	ON STATIONS
	FOR EACH ROW
		EXECUTE PROCEDURE TG_CREATE_NEW_STATION_TABLE();
